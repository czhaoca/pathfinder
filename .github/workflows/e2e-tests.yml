name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2, 3, 4]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          npm run wait-for-services
      
      - name: Run database migrations
        run: npm run db:migrate:test
      
      - name: Seed test data
        run: npm run db:seed:test
      
      - name: Run E2E tests
        run: |
          npx playwright test \
            --project=${{ matrix.browser }} \
            --shard=${{ matrix.shard }}/4 \
            --reporter=junit \
            --reporter-output=test-results/junit-${{ matrix.browser }}-${{ matrix.shard }}.xml
        env:
          CI: true
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:4000
          ADMIN_TOKEN: ${{ secrets.E2E_ADMIN_TOKEN }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: test-results/
      
      - name: Upload playwright report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}
          path: playwright-report/
      
      - name: Stop test environment
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  merge-reports:
    needs: e2e-tests
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: all-results/
      
      - name: Merge test results
        run: |
          npm install junit-report-merger
          npx junit-report-merger all-results/**/junit-*.xml merged-results.xml
      
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: merged-results.xml
          check_name: E2E Test Results
          comment_mode: always
      
      - name: Generate summary
        run: |
          echo "## E2E Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          node scripts/generate-test-summary.js merged-results.xml >> $GITHUB_STEP_SUMMARY

  accessibility-tests:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install chromium
      
      - name: Start application
        run: |
          npm run build
          npm run start:test &
          npm run wait-for-app
      
      - name: Run accessibility tests
        run: npx playwright test e2e/tests/accessibility --reporter=json --reporter-output=a11y-results.json
      
      - name: Generate accessibility report
        run: node scripts/generate-a11y-report.js a11y-results.json
      
      - name: Upload accessibility report
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-report
          path: a11y-report.html
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('a11y-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  performance-tests:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install chromium
      
      - name: Build application
        run: npm run build
      
      - name: Start application
        run: |
          npm run start:prod &
          npm run wait-for-app
      
      - name: Run performance tests
        run: npx playwright test e2e/tests/performance --reporter=json --reporter-output=perf-results.json
      
      - name: Analyze performance metrics
        run: node scripts/analyze-performance.js perf-results.json
      
      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.html
      
      - name: Check performance budgets
        run: |
          node scripts/check-performance-budgets.js perf-results.json
          if [ $? -ne 0 ]; then
            echo "::error::Performance budgets exceeded"
            exit 1
          fi

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Run security tests
        run: |
          npm ci
          npx playwright install chromium
          npm run start:test &
          npm run wait-for-app
          npx playwright test e2e/tests/security --reporter=json --reporter-output=security-results.json
      
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
      
      - name: Upload ZAP report
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: report_html.html